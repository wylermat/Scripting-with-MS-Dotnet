using System.Linq;
using ITVComponents.Scripting.CScript.Optimization;

namespace ITVComponents.Scripting.CScript.ScriptValues
{
    public class SequenceValue:LiteralScriptValue
    {
        public SequenceValue() 
        {
        }

        /// <summary>
        /// Initializes a new instance of the SequenceValue class
        /// </summary>
        /// <param name="value">the sequenced values that was generated by a call</param>
        public void Initialize(ScriptValue[] value)
        {
            base.Initialize(value);
            Sequence = value;
        }

        /// <summary>
        /// Gets the Sequenced Values generated by an Expression-sequence
        /// </summary>
        public ScriptValue[] Sequence { get; private set; }

        /// <summary>
        /// Gets the effective Value of this ScriptValue instance
        /// </summary>
        /// <param name="arguments">indexer/method/constructor arguments</param>
        /// <returns>an object that represents the value of this ScriptValue</returns>
        public override object GetValue(ScriptValue[] arguments)
        {
            ScriptValue val = Sequence.FirstOrDefault();
            if (val != null)
            {
                return val.GetValue(arguments);
            }

            return null;
            //return base.GetValue(arguments);
        }
    }
}
