//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ITVScripting.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ITVComponents.Scripting.CScript.Core {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ITVScriptingParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IITVScriptingVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] ITVScriptingParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSourceElements([NotNull] ITVScriptingParser.SourceElementsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSourceElement([NotNull] ITVScriptingParser.SourceElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] ITVScriptingParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] ITVScriptingParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementList([NotNull] ITVScriptingParser.StatementListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] ITVScriptingParser.EmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] ITVScriptingParser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] ITVScriptingParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ITVScriptingParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoStatement([NotNull] ITVScriptingParser.DoStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ITVScriptingParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] ITVScriptingParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ITVScriptingParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForInStatement([NotNull] ITVScriptingParser.ForInStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ITVScriptingParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] ITVScriptingParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStatement([NotNull] ITVScriptingParser.ContinueStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] ITVScriptingParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] ITVScriptingParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchStatement([NotNull] ITVScriptingParser.SwitchStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseBlock([NotNull] ITVScriptingParser.CaseBlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseClauses([NotNull] ITVScriptingParser.CaseClausesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseClause([NotNull] ITVScriptingParser.CaseClauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultClause([NotNull] ITVScriptingParser.DefaultClauseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitThrowStatement([NotNull] ITVScriptingParser.ThrowStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTryStatement([NotNull] ITVScriptingParser.TryStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCatchProduction([NotNull] ITVScriptingParser.CatchProductionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFinallyProduction([NotNull] ITVScriptingParser.FinallyProductionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] ITVScriptingParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormalParameterList([NotNull] ITVScriptingParser.FormalParameterListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionBody([NotNull] ITVScriptingParser.FunctionBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayLiteral([NotNull] ITVScriptingParser.ArrayLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElementList([NotNull] ITVScriptingParser.ElementListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectLiteral([NotNull] ITVScriptingParser.ObjectLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.propertyNameAndValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropertyNameAndValueList([NotNull] ITVScriptingParser.PropertyNameAndValueListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ITVScriptingParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropertyExpressionAssignment([NotNull] ITVScriptingParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] ITVScriptingParser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FinalGenerics</c>
	/// labeled alternative in <see cref="ITVScriptingParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFinalGenerics([NotNull] ITVScriptingParser.FinalGenericsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OpenGenerics</c>
	/// labeled alternative in <see cref="ITVScriptingParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOpenGenerics([NotNull] ITVScriptingParser.OpenGenericsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.typedArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypedArguments([NotNull] ITVScriptingParser.TypedArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeIdentifier([NotNull] ITVScriptingParser.TypeIdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] ITVScriptingParser.ArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionSequence([NotNull] ITVScriptingParser.ExpressionSequenceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTernaryExpression([NotNull] ITVScriptingParser.TernaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndExpression([NotNull] ITVScriptingParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreIncrementExpression([NotNull] ITVScriptingParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectLiteralExpression([NotNull] ITVScriptingParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrExpression([NotNull] ITVScriptingParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] ITVScriptingParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreDecreaseExpression([NotNull] ITVScriptingParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentsExpression([NotNull] ITVScriptingParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionExpression([NotNull] ITVScriptingParser.FunctionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinusExpression([NotNull] ITVScriptingParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentExpression([NotNull] ITVScriptingParser.AssignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberDotQExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberDotQExpression([NotNull] ITVScriptingParser.MemberDotQExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostDecreaseExpression([NotNull] ITVScriptingParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPlusExpression([NotNull] ITVScriptingParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpression([NotNull] ITVScriptingParser.EqualityExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitXOrExpression([NotNull] ITVScriptingParser.BitXOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] ITVScriptingParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitShiftExpression([NotNull] ITVScriptingParser.BitShiftExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] ITVScriptingParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] ITVScriptingParser.AdditiveExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpression([NotNull] ITVScriptingParser.RelationalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostIncrementExpression([NotNull] ITVScriptingParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitNotExpression([NotNull] ITVScriptingParser.BitNotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewExpression([NotNull] ITVScriptingParser.NewExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpression([NotNull] ITVScriptingParser.LiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayLiteralExpression([NotNull] ITVScriptingParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberDotExpression([NotNull] ITVScriptingParser.MemberDotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberIndexExpression([NotNull] ITVScriptingParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InstanceIsNullExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstanceIsNullExpression([NotNull] ITVScriptingParser.InstanceIsNullExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] ITVScriptingParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitAndExpression([NotNull] ITVScriptingParser.BitAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitOrExpression([NotNull] ITVScriptingParser.BitOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ITVScriptingParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentOperatorExpression([NotNull] ITVScriptingParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentOperator([NotNull] ITVScriptingParser.AssignmentOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] ITVScriptingParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericLiteral([NotNull] ITVScriptingParser.NumericLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierName([NotNull] ITVScriptingParser.IdentifierNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReservedWord([NotNull] ITVScriptingParser.ReservedWordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword([NotNull] ITVScriptingParser.KeywordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEos([NotNull] ITVScriptingParser.EosContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEof([NotNull] ITVScriptingParser.EofContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.nullLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullLiteral([NotNull] ITVScriptingParser.NullLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.refLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRefLiteral([NotNull] ITVScriptingParser.RefLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.booleanLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanLiteral([NotNull] ITVScriptingParser.BooleanLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ITVScriptingParser.typeLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeLiteral([NotNull] ITVScriptingParser.TypeLiteralContext context);
}
} // namespace ITVComponents.Scripting.CScript.Core
