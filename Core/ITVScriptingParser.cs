//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ITVScripting.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace ITVComponents.Scripting.CScript.Core {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class ITVScriptingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		LineTerminator=10, OpenBracket=11, CloseBracket=12, OpenParen=13, CloseParen=14, 
		OpenBrace=15, CloseBrace=16, SemiColon=17, Comma=18, Assign=19, DoubleQMark=20, 
		QuestionMark=21, Colon=22, Dot=23, DotQ=24, PlusPlus=25, MinusMinus=26, 
		Plus=27, Minus=28, BitNot=29, Not=30, Multiply=31, Divide=32, Modulus=33, 
		RightShiftArithmetic=34, LeftShiftArithmetic=35, LessThan=36, MoreThan=37, 
		LessThanEquals=38, GreaterThanEquals=39, Equals=40, NotEquals=41, BitAnd=42, 
		BitXOr=43, BitOr=44, And=45, Or=46, MultiplyAssign=47, DivideAssign=48, 
		ModulusAssign=49, PlusAssign=50, MinusAssign=51, LeftShiftArithmeticAssign=52, 
		RightShiftArithmeticAssign=53, BitAndAssign=54, BitXorAssign=55, BitOrAssign=56, 
		DecimalLiteral=57, HexIntegerLiteral=58, OctalIntegerLiteral=59, Break=60, 
		Do=61, Case=62, Else=63, New=64, Catch=65, Finally=66, Return=67, Continue=68, 
		For=69, Foreach=70, Switch=71, While=72, Function=73, Default=74, If=75, 
		Throw=76, In=77, Try=78, Identifier=79, StringLiteral=80, WhiteSpaces=81, 
		MultiLineComment=82, SingleLineComment=83, UnexpectedCharacter=84;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_statement = 3, 
		RULE_block = 4, RULE_statementList = 5, RULE_emptyStatement = 6, RULE_expressionStatement = 7, 
		RULE_ifStatement = 8, RULE_iterationStatement = 9, RULE_continueStatement = 10, 
		RULE_breakStatement = 11, RULE_returnStatement = 12, RULE_switchStatement = 13, 
		RULE_caseBlock = 14, RULE_caseClauses = 15, RULE_caseClause = 16, RULE_defaultClause = 17, 
		RULE_throwStatement = 18, RULE_tryStatement = 19, RULE_catchProduction = 20, 
		RULE_finallyProduction = 21, RULE_functionDeclaration = 22, RULE_formalParameterList = 23, 
		RULE_functionBody = 24, RULE_arrayLiteral = 25, RULE_elementList = 26, 
		RULE_objectLiteral = 27, RULE_propertyNameAndValueList = 28, RULE_propertyAssignment = 29, 
		RULE_arguments = 30, RULE_typeArguments = 31, RULE_typedArguments = 32, 
		RULE_typeIdentifier = 33, RULE_argumentList = 34, RULE_expressionSequence = 35, 
		RULE_singleExpression = 36, RULE_assignmentOperator = 37, RULE_literal = 38, 
		RULE_numericLiteral = 39, RULE_identifierName = 40, RULE_reservedWord = 41, 
		RULE_keyword = 42, RULE_eos = 43, RULE_eof = 44, RULE_nullLiteral = 45, 
		RULE_refLiteral = 46, RULE_booleanLiteral = 47, RULE_typeLiteral = 48;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "statement", "block", "statementList", 
		"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
		"continueStatement", "breakStatement", "returnStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "functionDeclaration", 
		"formalParameterList", "functionBody", "arrayLiteral", "elementList", 
		"objectLiteral", "propertyNameAndValueList", "propertyAssignment", "arguments", 
		"typeArguments", "typedArguments", "typeIdentifier", "argumentList", "expressionSequence", 
		"singleExpression", "assignmentOperator", "literal", "numericLiteral", 
		"identifierName", "reservedWord", "keyword", "eos", "eof", "nullLiteral", 
		"refLiteral", "booleanLiteral", "typeLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'`'", "'#'", "'?.'", "'null'", "'ref'", "'true'", "'false'", "'''", 
		"'@'", null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", "'='", 
		"'??'", "'?'", "':'", "'.'", "'.?'", "'++'", "'--'", "'+'", "'-'", "'~'", 
		"'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", 
		"'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", null, null, 
		null, "'break'", "'do'", "'case'", "'else'", "'new'", "'catch'", "'finally'", 
		"'return'", "'continue'", "'for'", "'foreach'", "'switch'", "'while'", 
		"'function'", "'default'", "'if'", "'throw'", "'in'", "'try'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "LineTerminator", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "DoubleQMark", "QuestionMark", 
		"Colon", "Dot", "DotQ", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals", 
		"NotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
		"DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "Break", 
		"Do", "Case", "Else", "New", "Catch", "Finally", "Return", "Continue", 
		"For", "Foreach", "Switch", "While", "Function", "Default", "If", "Throw", 
		"In", "Try", "Identifier", "StringLiteral", "WhiteSpaces", "MultiLineComment", 
		"SingleLineComment", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ITVScripting.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	  
	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</summary>
	    ///<param name="type">the type of the token on the <c>Hidden</c> channel
	    ///to check.</param>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</returns>
	    private bool here(int type) {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = TokenStream.Get(possibleIndexEosToken);

	        // Check if the token resides on the Hidden channel and if it's of the
	        // provided type.
	        return (ahead.Channel == Lexer.Hidden) && (ahead.Type == type);
	    }

	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</summary>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</returns>
	    private bool lineTerminatorAhead() {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = TokenStream.Get(possibleIndexEosToken);

	        if (ahead.Channel != Lexer.Hidden) {
	            // We're only interested in tokens on the Hidden channel.
	            return false;
	        }

			if (ahead.Type == LineTerminator) {
	            // There is definitely a line terminator ahead.
	            return true;
	        }

	        if (ahead.Type == WhiteSpaces) {
	            // Get the token ahead of the current whitespaces.
	            possibleIndexEosToken = this.CurrentToken.TokenIndex - 2;
	            ahead = TokenStream.Get(possibleIndexEosToken);
	        }
	        // Get the token's text and type.
	        string text = ahead.Text;
	        int type = ahead.Type;

	        // Check if the token is, or contains a line terminator.
	        return (type == MultiLineComment && (text.Contains("\r") || text.Contains("\n"))) ||
	                (type == LineTerminator);
	    }                                

	public ITVScriptingParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 98; sourceElements();
				}
				break;
			}
			State = 101; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 103; sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 110;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 123;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; emptyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 116; iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 117; continueStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 118; breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 119; returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 120; switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 121; throwStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 122; tryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(OpenBrace);
			State = 127;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 126; statementList();
				}
				break;
			}
			State = 129; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 131; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ITVScriptingParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			if (!((TokenStream.La(1) != OpenBrace) && (TokenStream.La(1) != Function))) throw new FailedPredicateException(this, "(TokenStream.La(1) != OpenBrace) && (TokenStream.La(1) != Function)");
			State = 139; expressionSequence();
			State = 140; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(ITVScriptingParser.If, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(ITVScriptingParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(If);
			State = 143; Match(OpenParen);
			State = 144; singleExpression(0);
			State = 145; Match(CloseParen);
			State = 146; statement();
			State = 149;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 147; Match(Else);
				State = 148; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		public ITerminalNode Do() { return GetToken(ITVScriptingParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ITVScriptingParser.For, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		public ITerminalNode Foreach() { return GetToken(ITVScriptingParser.Foreach, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode In() { return GetToken(ITVScriptingParser.In, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_iterationStatement);
		int _la;
		try {
			State = 188;
			switch (TokenStream.La(1)) {
			case Do:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; Match(Do);
				State = 152; statement();
				State = 153; Match(While);
				State = 154; Match(OpenParen);
				State = 155; singleExpression(0);
				State = 156; Match(CloseParen);
				State = 157; eos();
				}
				break;
			case While:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(While);
				State = 160; Match(OpenParen);
				State = 161; singleExpression(0);
				State = 162; Match(CloseParen);
				State = 163; statement();
				}
				break;
			case Foreach:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; Match(Foreach);
				State = 166; Match(OpenParen);
				State = 167; singleExpression(0);
				State = 168; Match(In);
				State = 169; singleExpression(0);
				State = 170; Match(CloseParen);
				State = 171; statement();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; Match(For);
				State = 174; Match(OpenParen);
				State = 176;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Function - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
					{
					State = 175; expressionSequence();
					}
				}

				State = 178; Match(SemiColon);
				State = 180;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Function - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
					{
					State = 179; expressionSequence();
					}
				}

				State = 182; Match(SemiColon);
				State = 184;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Function - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
					{
					State = 183; expressionSequence();
					}
				}

				State = 186; Match(CloseParen);
				State = 187; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(ITVScriptingParser.Continue, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(Continue);
			State = 191; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ITVScriptingParser.Break, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(Break);
			State = 194; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(ITVScriptingParser.Return, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(Return);
			State = 198;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 197; singleExpression(0);
				}
				break;
			}
			State = 200; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(ITVScriptingParser.Switch, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(Switch);
			State = 203; Match(OpenParen);
			State = 204; singleExpression(0);
			State = 205; Match(CloseParen);
			State = 206; caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public CaseClausesContext caseClauses() {
			return GetRuleContext<CaseClausesContext>(0);
		}
		public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(OpenBrace);
			State = 209; caseClauses();
			State = 211;
			_la = TokenStream.La(1);
			if (_la==Default) {
				{
				State = 210; defaultClause();
				}
			}

			State = 213; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 215; caseClause();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(ITVScriptingParser.Case, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(Case);
			State = 221; singleExpression(0);
			State = 222; Match(Colon);
			State = 224;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 223; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(ITVScriptingParser.Default, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(Default);
			State = 227; Match(Colon);
			State = 229;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 228; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(ITVScriptingParser.Throw, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(Throw);
			State = 233;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 232; singleExpression(0);
				}
				break;
			}
			State = 235; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(ITVScriptingParser.Try, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_tryStatement);
		try {
			State = 250;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(Try);
				State = 238; block();
				State = 239; catchProduction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(Try);
				State = 242; block();
				State = 243; finallyProduction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245; Match(Try);
				State = 246; block();
				State = 247; catchProduction();
				State = 248; finallyProduction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(ITVScriptingParser.Catch, 0); }
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 40, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(Catch);
			State = 253; Match(OpenParen);
			State = 254; Match(Identifier);
			State = 255; Match(CloseParen);
			State = 256; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(ITVScriptingParser.Finally, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 42, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(Finally);
			State = 259; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(Function);
			State = 262; Match(Identifier);
			State = 263; Match(OpenParen);
			State = 265;
			_la = TokenStream.La(1);
			if (_la==Identifier) {
				{
				State = 264; formalParameterList();
				}
			}

			State = 267; Match(CloseParen);
			State = 268; Match(OpenBrace);
			State = 269; functionBody();
			State = 270; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 46, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(Identifier);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 273; Match(Comma);
				State = 274; Match(Identifier);
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 280; sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(OpenBracket);
			State = 285;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Function - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 284; elementList();
				}
			}

			State = 287; Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 52, RULE_elementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; singleExpression(0);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 290; Match(Comma);
				State = 291; singleExpression(0);
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public PropertyNameAndValueListContext propertyNameAndValueList() {
			return GetRuleContext<PropertyNameAndValueListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 54, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(OpenBrace);
			State = 299;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << Break) | (1L << Do) | (1L << Case) | (1L << Else))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Function - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 298; propertyNameAndValueList();
				}
			}

			State = 302;
			_la = TokenStream.La(1);
			if (_la==Comma) {
				{
				State = 301; Match(Comma);
				}
			}

			State = 304; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameAndValueListContext : ParserRuleContext {
		public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		public PropertyNameAndValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyNameAndValueList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyNameAndValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameAndValueListContext propertyNameAndValueList() {
		PropertyNameAndValueListContext _localctx = new PropertyNameAndValueListContext(Context, State);
		EnterRule(_localctx, 56, RULE_propertyNameAndValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; propertyAssignment();
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 307; Match(Comma);
					State = 308; propertyAssignment();
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertyAssignment);
		try {
			_localctx = new PropertyExpressionAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; identifierName();
			State = 315; Match(Colon);
			State = 316; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(OpenParen);
			State = 320;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (New - 64)) | (1L << (Function - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 319; argumentList();
				}
			}

			State = 322; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
	 
		public TypeArgumentsContext() { }
		public virtual void CopyFrom(TypeArgumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpenGenericsContext : TypeArgumentsContext {
		public ITerminalNode[] DecimalLiteral() { return GetTokens(ITVScriptingParser.DecimalLiteral); }
		public ITerminalNode DecimalLiteral(int i) {
			return GetToken(ITVScriptingParser.DecimalLiteral, i);
		}
		public OpenGenericsContext(TypeArgumentsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenGenerics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinalGenericsContext : TypeArgumentsContext {
		public TypedArgumentsContext typedArguments() {
			return GetRuleContext<TypedArgumentsContext>(0);
		}
		public FinalGenericsContext(TypeArgumentsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalGenerics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeArguments);
		int _la;
		try {
			State = 334;
			switch (TokenStream.La(1)) {
			case LessThan:
				_localctx = new FinalGenericsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; Match(LessThan);
				State = 325; typedArguments();
				State = 326; Match(MoreThan);
				}
				break;
			case T__0:
				_localctx = new OpenGenericsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 328; Match(T__0);
					State = 329; Match(DecimalLiteral);
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==T__0 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedArgumentsContext : ParserRuleContext {
		public TypeIdentifierContext[] typeIdentifier() {
			return GetRuleContexts<TypeIdentifierContext>();
		}
		public TypeIdentifierContext typeIdentifier(int i) {
			return GetRuleContext<TypeIdentifierContext>(i);
		}
		public TypedArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedArgumentsContext typedArguments() {
		TypedArgumentsContext _localctx = new TypedArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_typedArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; typeIdentifier();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 337; Match(Comma);
				State = 338; typeIdentifier();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__1);
			State = 345; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 68, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; singleExpression(0);
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 348; Match(Comma);
				State = 349; singleExpression(0);
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 70, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; singleExpression(0);
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 356; Match(Comma);
					State = 357; singleExpression(0);
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotQExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MemberDotQExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotQExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(ITVScriptingParser.New, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceIsNullExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public InstanceIsNullExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceIsNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			switch (TokenStream.La(1)) {
			case PlusPlus:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 364; Match(PlusPlus);
				State = 365; singleExpression(25);
				}
				break;
			case MinusMinus:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366; Match(MinusMinus);
				State = 367; singleExpression(24);
				}
				break;
			case Plus:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368; Match(Plus);
				State = 369; singleExpression(23);
				}
				break;
			case Minus:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370; Match(Minus);
				State = 371; singleExpression(22);
				}
				break;
			case BitNot:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372; Match(BitNot);
				State = 373; singleExpression(21);
				}
				break;
			case Not:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 374; Match(Not);
				State = 375; singleExpression(20);
				}
				break;
			case Function:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376; Match(Function);
				State = 378;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 377; Match(Identifier);
					}
				}

				State = 380; Match(OpenParen);
				State = 382;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 381; formalParameterList();
					}
				}

				State = 384; Match(CloseParen);
				State = 385; Match(OpenBrace);
				State = 386; functionBody();
				State = 387; Match(CloseBrace);
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389; Match(New);
				State = 390; singleExpression(0);
				State = 392;
				_la = TokenStream.La(1);
				if (_la==T__0 || _la==LessThan) {
					{
					State = 391; typeArguments();
					}
				}

				State = 394; arguments();
				}
				break;
			case Identifier:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396; Match(Identifier);
				}
				break;
			case T__3:
			case T__5:
			case T__6:
			case T__7:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case StringLiteral:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397; literal();
				}
				break;
			case OpenBracket:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398; arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399; objectLiteral();
				}
				break;
			case OpenParen:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400; Match(OpenParen);
				State = 401; singleExpression(0);
				State = 402; Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 474;
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 406;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 407;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 408; singleExpression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 409;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 410;
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 411; singleExpression(19);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 412;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 413;
						_la = TokenStream.La(1);
						if ( !(_la==RightShiftArithmetic || _la==LeftShiftArithmetic) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 414; singleExpression(18);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 415;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 416;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 417; singleExpression(17);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 418;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 419;
						_la = TokenStream.La(1);
						if ( !(_la==Equals || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 420; singleExpression(16);
						}
						break;
					case 6:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 421;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 422; Match(BitAnd);
						State = 423; singleExpression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 424;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 425; Match(BitXOr);
						State = 426; singleExpression(14);
						}
						break;
					case 8:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 427;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 428; Match(BitOr);
						State = 429; singleExpression(13);
						}
						break;
					case 9:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 430;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 431; Match(And);
						State = 432; singleExpression(12);
						}
						break;
					case 10:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 433;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 434; Match(Or);
						State = 435; singleExpression(11);
						}
						break;
					case 11:
						{
						_localctx = new InstanceIsNullExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 436;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 437; Match(DoubleQMark);
						State = 438; singleExpression(10);
						}
						break;
					case 12:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 439;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 440; Match(QuestionMark);
						State = 441; singleExpression(0);
						State = 442; Match(Colon);
						State = 443; singleExpression(9);
						}
						break;
					case 13:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 445;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 446; Match(Assign);
						State = 447; singleExpression(8);
						}
						break;
					case 14:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 448;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 449; assignmentOperator();
						State = 450; singleExpression(7);
						}
						break;
					case 15:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 452;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 453; Match(OpenBracket);
						State = 454; expressionSequence();
						State = 455; Match(CloseBracket);
						}
						break;
					case 16:
						{
						_localctx = new MemberDotQExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 457;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 458; Match(T__2);
						State = 459; identifierName();
						}
						break;
					case 17:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 460;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 461; Match(Dot);
						State = 462; identifierName();
						}
						break;
					case 18:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 463;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 465;
						_la = TokenStream.La(1);
						if (_la==T__0 || _la==LessThan) {
							{
							State = 464; typeArguments();
							}
						}

						State = 467; arguments();
						}
						break;
					case 19:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 468;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 469;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 470; Match(PlusPlus);
						}
						break;
					case 20:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 471;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 472;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 473; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public RefLiteralContext refLiteral() {
			return GetRuleContext<RefLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 76, RULE_literal);
		try {
			State = 487;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481; nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482; booleanLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 483; Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 484; typeLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 485; numericLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 486; refLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(ITVScriptingParser.DecimalLiteral, 0); }
		public ITerminalNode HexIntegerLiteral() { return GetToken(ITVScriptingParser.HexIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral() { return GetToken(ITVScriptingParser.OctalIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 78, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ITVScriptingParser.Identifier, 0); }
		public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_identifierName);
		try {
			State = 493;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; Match(Identifier);
				}
				break;
			case T__3:
			case T__5:
			case T__6:
			case T__7:
			case Break:
			case Do:
			case Case:
			case Else:
			case New:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case Switch:
			case While:
			case Function:
			case Default:
			case If:
			case Throw:
			case In:
			case Try:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492; reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 82, RULE_reservedWord);
		try {
			State = 500;
			switch (TokenStream.La(1)) {
			case Break:
			case Do:
			case Case:
			case Else:
			case New:
			case Catch:
			case Finally:
			case Return:
			case Continue:
			case For:
			case Switch:
			case While:
			case Function:
			case Default:
			case If:
			case Throw:
			case In:
			case Try:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495; keyword();
				}
				break;
			case T__3:
			case T__5:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498;
				switch (TokenStream.La(1)) {
				case T__3:
				case T__7:
					{
					State = 496; nullLiteral();
					}
					break;
				case T__5:
				case T__6:
					{
					State = 497; booleanLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ITVScriptingParser.Break, 0); }
		public ITerminalNode Do() { return GetToken(ITVScriptingParser.Do, 0); }
		public ITerminalNode Case() { return GetToken(ITVScriptingParser.Case, 0); }
		public ITerminalNode Else() { return GetToken(ITVScriptingParser.Else, 0); }
		public ITerminalNode New() { return GetToken(ITVScriptingParser.New, 0); }
		public ITerminalNode Catch() { return GetToken(ITVScriptingParser.Catch, 0); }
		public ITerminalNode Finally() { return GetToken(ITVScriptingParser.Finally, 0); }
		public ITerminalNode Return() { return GetToken(ITVScriptingParser.Return, 0); }
		public ITerminalNode Continue() { return GetToken(ITVScriptingParser.Continue, 0); }
		public ITerminalNode For() { return GetToken(ITVScriptingParser.For, 0); }
		public ITerminalNode Switch() { return GetToken(ITVScriptingParser.Switch, 0); }
		public ITerminalNode While() { return GetToken(ITVScriptingParser.While, 0); }
		public ITerminalNode Function() { return GetToken(ITVScriptingParser.Function, 0); }
		public ITerminalNode Default() { return GetToken(ITVScriptingParser.Default, 0); }
		public ITerminalNode If() { return GetToken(ITVScriptingParser.If, 0); }
		public ITerminalNode Throw() { return GetToken(ITVScriptingParser.Throw, 0); }
		public ITerminalNode In() { return GetToken(ITVScriptingParser.In, 0); }
		public ITerminalNode Try() { return GetToken(ITVScriptingParser.Try, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 84, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = TokenStream.La(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (Break - 60)) | (1L << (Do - 60)) | (1L << (Case - 60)) | (1L << (Else - 60)) | (1L << (New - 60)) | (1L << (Catch - 60)) | (1L << (Finally - 60)) | (1L << (Return - 60)) | (1L << (Continue - 60)) | (1L << (For - 60)) | (1L << (Switch - 60)) | (1L << (While - 60)) | (1L << (Function - 60)) | (1L << (Default - 60)) | (1L << (If - 60)) | (1L << (Throw - 60)) | (1L << (In - 60)) | (1L << (Try - 60)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ITVScriptingParser.SemiColon, 0); }
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 86, RULE_eos);
		try {
			State = 508;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 506;
				if (!(lineTerminatorAhead())) throw new FailedPredicateException(this, "lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 507;
				if (!(TokenStream.Lt(1).Type == CloseBrace)) throw new FailedPredicateException(this, "TokenStream.Lt(1).Type == CloseBrace");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ITVScriptingParser.Eof, 0); }
		public EofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eof; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EofContext eof() {
		EofContext _localctx = new EofContext(Context, State);
		EnterRule(_localctx, 88, RULE_eof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_nullLiteral);
		try {
			State = 517;
			switch (TokenStream.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512; Match(T__3);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513; typeLiteral();
				State = 514; Match(Dot);
				State = 515; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefLiteralContext : ParserRuleContext {
		public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public RefLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefLiteralContext refLiteral() {
		RefLiteralContext _localctx = new RefLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_refLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; typeLiteral();
			State = 520; Match(Dot);
			State = 521; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			_la = TokenStream.La(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ITVScriptingParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ITVScriptingParser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(ITVScriptingParser.StringLiteral, 0); }
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IITVScriptingVisitor<TResult> typedVisitor = visitor as IITVScriptingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_typeLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(T__7);
			State = 526; Match(Identifier);
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Dot) {
				{
				{
				State = 527; Match(Dot);
				State = 528; Match(Identifier);
				}
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 535;
			_la = TokenStream.La(1);
			if (_la==T__0 || _la==LessThan) {
				{
				State = 534; typeArguments();
				}
			}

			State = 539;
			_la = TokenStream.La(1);
			if (_la==T__8) {
				{
				State = 537; Match(T__8);
				State = 538; Match(StringLiteral);
				}
			}

			State = 541; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 36: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 43: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (TokenStream.La(1) != OpenBrace) && (TokenStream.La(1) != Function);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 6);
		case 15: return Precpred(Context, 32);
		case 16: return Precpred(Context, 31);
		case 17: return Precpred(Context, 30);
		case 18: return Precpred(Context, 29);
		case 19: return Precpred(Context, 27);
		case 20: return !here(LineTerminator);
		case 21: return Precpred(Context, 26);
		case 22: return !here(LineTerminator);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return lineTerminatorAhead();
		case 24: return TokenStream.Lt(1).Type == CloseBrace;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3V\x222\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x3\x2\x5\x2\x66\n\x2\x3\x2\x3\x2\x3\x3\x6\x3k\n\x3\r\x3\xE\x3l"+
		"\x3\x4\x3\x4\x5\x4q\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5~\n\x5\x3\x6\x3\x6\x5\x6\x82\n\x6\x3\x6\x3"+
		"\x6\x3\a\x6\a\x87\n\a\r\a\xE\a\x88\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x98\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xB3\n\v\x3\v\x3\v\x5\v\xB7\n\v\x3\v\x3"+
		"\v\x5\v\xBB\n\v\x3\v\x3\v\x5\v\xBF\n\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x5\xE\xC9\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x5\x10\xD6\n\x10\x3\x10\x3\x10\x3\x11\x6\x11"+
		"\xDB\n\x11\r\x11\xE\x11\xDC\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xE3\n\x12"+
		"\x3\x13\x3\x13\x3\x13\x5\x13\xE8\n\x13\x3\x14\x3\x14\x5\x14\xEC\n\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xFD\n\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\x10C\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x116\n\x19\f\x19\xE\x19\x119\v\x19\x3\x1A\x5\x1A\x11C\n"+
		"\x1A\x3\x1B\x3\x1B\x5\x1B\x120\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\a\x1C\x127\n\x1C\f\x1C\xE\x1C\x12A\v\x1C\x3\x1D\x3\x1D\x5\x1D\x12E\n"+
		"\x1D\x3\x1D\x5\x1D\x131\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x138\n\x1E\f\x1E\xE\x1E\x13B\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3"+
		" \x5 \x143\n \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x6!\x14D\n!\r!\xE!\x14E"+
		"\x5!\x151\n!\x3\"\x3\"\x3\"\a\"\x156\n\"\f\"\xE\"\x159\v\"\x3#\x3#\x3"+
		"#\x3$\x3$\x3$\a$\x161\n$\f$\xE$\x164\v$\x3%\x3%\x3%\a%\x169\n%\f%\xE%"+
		"\x16C\v%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5"+
		"&\x17D\n&\x3&\x3&\x5&\x181\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x18B"+
		"\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x197\n&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x5&\x1D4\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\a&\x1DD\n&\f&\xE"+
		"&\x1E0\v&\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x1EA\n(\x3)\x3)\x3*\x3"+
		"*\x5*\x1F0\n*\x3+\x3+\x3+\x5+\x1F5\n+\x5+\x1F7\n+\x3,\x3,\x3-\x3-\x3-"+
		"\x3-\x5-\x1FF\n-\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x5/\x208\n/\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x214\n"+
		"\x32\f\x32\xE\x32\x217\v\x32\x3\x32\x5\x32\x21A\n\x32\x3\x32\x3\x32\x5"+
		"\x32\x21E\n\x32\x3\x32\x3\x32\x3\x32\x2\x3J\x33\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44"+
		"\x46HJLNPRTVXZ\\^`\x62\x2\v\x3\x2!#\x3\x2\x1D\x1E\x3\x2$%\x3\x2&)\x3\x2"+
		"*+\x3\x2\x31:\x3\x2;=\x4\x2>GIP\x3\x2\b\t\x24F\x2\x65\x3\x2\x2\x2\x4j"+
		"\x3\x2\x2\x2\x6p\x3\x2\x2\x2\b}\x3\x2\x2\x2\n\x7F\x3\x2\x2\x2\f\x86\x3"+
		"\x2\x2\x2\xE\x8A\x3\x2\x2\x2\x10\x8C\x3\x2\x2\x2\x12\x90\x3\x2\x2\x2\x14"+
		"\xBE\x3\x2\x2\x2\x16\xC0\x3\x2\x2\x2\x18\xC3\x3\x2\x2\x2\x1A\xC6\x3\x2"+
		"\x2\x2\x1C\xCC\x3\x2\x2\x2\x1E\xD2\x3\x2\x2\x2 \xDA\x3\x2\x2\x2\"\xDE"+
		"\x3\x2\x2\x2$\xE4\x3\x2\x2\x2&\xE9\x3\x2\x2\x2(\xFC\x3\x2\x2\x2*\xFE\x3"+
		"\x2\x2\x2,\x104\x3\x2\x2\x2.\x107\x3\x2\x2\x2\x30\x112\x3\x2\x2\x2\x32"+
		"\x11B\x3\x2\x2\x2\x34\x11D\x3\x2\x2\x2\x36\x123\x3\x2\x2\x2\x38\x12B\x3"+
		"\x2\x2\x2:\x134\x3\x2\x2\x2<\x13C\x3\x2\x2\x2>\x140\x3\x2\x2\x2@\x150"+
		"\x3\x2\x2\x2\x42\x152\x3\x2\x2\x2\x44\x15A\x3\x2\x2\x2\x46\x15D\x3\x2"+
		"\x2\x2H\x165\x3\x2\x2\x2J\x196\x3\x2\x2\x2L\x1E1\x3\x2\x2\x2N\x1E9\x3"+
		"\x2\x2\x2P\x1EB\x3\x2\x2\x2R\x1EF\x3\x2\x2\x2T\x1F6\x3\x2\x2\x2V\x1F8"+
		"\x3\x2\x2\x2X\x1FE\x3\x2\x2\x2Z\x200\x3\x2\x2\x2\\\x207\x3\x2\x2\x2^\x209"+
		"\x3\x2\x2\x2`\x20D\x3\x2\x2\x2\x62\x20F\x3\x2\x2\x2\x64\x66\x5\x4\x3\x2"+
		"\x65\x64\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\a\x2\x2\x3"+
		"h\x3\x3\x2\x2\x2ik\x5\x6\x4\x2ji\x3\x2\x2\x2kl\x3\x2\x2\x2lj\x3\x2\x2"+
		"\x2lm\x3\x2\x2\x2m\x5\x3\x2\x2\x2nq\x5\b\x5\x2oq\x5.\x18\x2pn\x3\x2\x2"+
		"\x2po\x3\x2\x2\x2q\a\x3\x2\x2\x2r~\x5\n\x6\x2s~\x5\xE\b\x2t~\x5\x10\t"+
		"\x2u~\x5\x12\n\x2v~\x5\x14\v\x2w~\x5\x16\f\x2x~\x5\x18\r\x2y~\x5\x1A\xE"+
		"\x2z~\x5\x1C\xF\x2{~\x5&\x14\x2|~\x5(\x15\x2}r\x3\x2\x2\x2}s\x3\x2\x2"+
		"\x2}t\x3\x2\x2\x2}u\x3\x2\x2\x2}v\x3\x2\x2\x2}w\x3\x2\x2\x2}x\x3\x2\x2"+
		"\x2}y\x3\x2\x2\x2}z\x3\x2\x2\x2}{\x3\x2\x2\x2}|\x3\x2\x2\x2~\t\x3\x2\x2"+
		"\x2\x7F\x81\a\x11\x2\x2\x80\x82\x5\f\a\x2\x81\x80\x3\x2\x2\x2\x81\x82"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\a\x12\x2\x2\x84\v\x3\x2\x2\x2"+
		"\x85\x87\x5\b\x5\x2\x86\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x86\x3"+
		"\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\r\x3\x2\x2\x2\x8A\x8B\a\x13\x2\x2\x8B"+
		"\xF\x3\x2\x2\x2\x8C\x8D\x6\t\x2\x2\x8D\x8E\x5H%\x2\x8E\x8F\x5X-\x2\x8F"+
		"\x11\x3\x2\x2\x2\x90\x91\aM\x2\x2\x91\x92\a\xF\x2\x2\x92\x93\x5J&\x2\x93"+
		"\x94\a\x10\x2\x2\x94\x97\x5\b\x5\x2\x95\x96\a\x41\x2\x2\x96\x98\x5\b\x5"+
		"\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x13\x3\x2\x2\x2\x99\x9A"+
		"\a?\x2\x2\x9A\x9B\x5\b\x5\x2\x9B\x9C\aJ\x2\x2\x9C\x9D\a\xF\x2\x2\x9D\x9E"+
		"\x5J&\x2\x9E\x9F\a\x10\x2\x2\x9F\xA0\x5X-\x2\xA0\xBF\x3\x2\x2\x2\xA1\xA2"+
		"\aJ\x2\x2\xA2\xA3\a\xF\x2\x2\xA3\xA4\x5J&\x2\xA4\xA5\a\x10\x2\x2\xA5\xA6"+
		"\x5\b\x5\x2\xA6\xBF\x3\x2\x2\x2\xA7\xA8\aH\x2\x2\xA8\xA9\a\xF\x2\x2\xA9"+
		"\xAA\x5J&\x2\xAA\xAB\aO\x2\x2\xAB\xAC\x5J&\x2\xAC\xAD\a\x10\x2\x2\xAD"+
		"\xAE\x5\b\x5\x2\xAE\xBF\x3\x2\x2\x2\xAF\xB0\aG\x2\x2\xB0\xB2\a\xF\x2\x2"+
		"\xB1\xB3\x5H%\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2"+
		"\x2\x2\xB4\xB6\a\x13\x2\x2\xB5\xB7\x5H%\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7"+
		"\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xBA\a\x13\x2\x2\xB9\xBB\x5H%\x2\xBA"+
		"\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\a\x10"+
		"\x2\x2\xBD\xBF\x5\b\x5\x2\xBE\x99\x3\x2\x2\x2\xBE\xA1\x3\x2\x2\x2\xBE"+
		"\xA7\x3\x2\x2\x2\xBE\xAF\x3\x2\x2\x2\xBF\x15\x3\x2\x2\x2\xC0\xC1\a\x46"+
		"\x2\x2\xC1\xC2\x5X-\x2\xC2\x17\x3\x2\x2\x2\xC3\xC4\a>\x2\x2\xC4\xC5\x5"+
		"X-\x2\xC5\x19\x3\x2\x2\x2\xC6\xC8\a\x45\x2\x2\xC7\xC9\x5J&\x2\xC8\xC7"+
		"\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x5X-\x2\xCB"+
		"\x1B\x3\x2\x2\x2\xCC\xCD\aI\x2\x2\xCD\xCE\a\xF\x2\x2\xCE\xCF\x5J&\x2\xCF"+
		"\xD0\a\x10\x2\x2\xD0\xD1\x5\x1E\x10\x2\xD1\x1D\x3\x2\x2\x2\xD2\xD3\a\x11"+
		"\x2\x2\xD3\xD5\x5 \x11\x2\xD4\xD6\x5$\x13\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6"+
		"\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8\a\x12\x2\x2\xD8\x1F\x3\x2\x2"+
		"\x2\xD9\xDB\x5\"\x12\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDA"+
		"\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD!\x3\x2\x2\x2\xDE\xDF\a@\x2\x2\xDF"+
		"\xE0\x5J&\x2\xE0\xE2\a\x18\x2\x2\xE1\xE3\x5\f\a\x2\xE2\xE1\x3\x2\x2\x2"+
		"\xE2\xE3\x3\x2\x2\x2\xE3#\x3\x2\x2\x2\xE4\xE5\aL\x2\x2\xE5\xE7\a\x18\x2"+
		"\x2\xE6\xE8\x5\f\a\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8%\x3"+
		"\x2\x2\x2\xE9\xEB\aN\x2\x2\xEA\xEC\x5J&\x2\xEB\xEA\x3\x2\x2\x2\xEB\xEC"+
		"\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\x5X-\x2\xEE\'\x3\x2\x2\x2\xEF"+
		"\xF0\aP\x2\x2\xF0\xF1\x5\n\x6\x2\xF1\xF2\x5*\x16\x2\xF2\xFD\x3\x2\x2\x2"+
		"\xF3\xF4\aP\x2\x2\xF4\xF5\x5\n\x6\x2\xF5\xF6\x5,\x17\x2\xF6\xFD\x3\x2"+
		"\x2\x2\xF7\xF8\aP\x2\x2\xF8\xF9\x5\n\x6\x2\xF9\xFA\x5*\x16\x2\xFA\xFB"+
		"\x5,\x17\x2\xFB\xFD\x3\x2\x2\x2\xFC\xEF\x3\x2\x2\x2\xFC\xF3\x3\x2\x2\x2"+
		"\xFC\xF7\x3\x2\x2\x2\xFD)\x3\x2\x2\x2\xFE\xFF\a\x43\x2\x2\xFF\x100\a\xF"+
		"\x2\x2\x100\x101\aQ\x2\x2\x101\x102\a\x10\x2\x2\x102\x103\x5\n\x6\x2\x103"+
		"+\x3\x2\x2\x2\x104\x105\a\x44\x2\x2\x105\x106\x5\n\x6\x2\x106-\x3\x2\x2"+
		"\x2\x107\x108\aK\x2\x2\x108\x109\aQ\x2\x2\x109\x10B\a\xF\x2\x2\x10A\x10C"+
		"\x5\x30\x19\x2\x10B\x10A\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\x3"+
		"\x2\x2\x2\x10D\x10E\a\x10\x2\x2\x10E\x10F\a\x11\x2\x2\x10F\x110\x5\x32"+
		"\x1A\x2\x110\x111\a\x12\x2\x2\x111/\x3\x2\x2\x2\x112\x117\aQ\x2\x2\x113"+
		"\x114\a\x14\x2\x2\x114\x116\aQ\x2\x2\x115\x113\x3\x2\x2\x2\x116\x119\x3"+
		"\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x31\x3\x2\x2"+
		"\x2\x119\x117\x3\x2\x2\x2\x11A\x11C\x5\x4\x3\x2\x11B\x11A\x3\x2\x2\x2"+
		"\x11B\x11C\x3\x2\x2\x2\x11C\x33\x3\x2\x2\x2\x11D\x11F\a\r\x2\x2\x11E\x120"+
		"\x5\x36\x1C\x2\x11F\x11E\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\x3"+
		"\x2\x2\x2\x121\x122\a\xE\x2\x2\x122\x35\x3\x2\x2\x2\x123\x128\x5J&\x2"+
		"\x124\x125\a\x14\x2\x2\x125\x127\x5J&\x2\x126\x124\x3\x2\x2\x2\x127\x12A"+
		"\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x37\x3\x2"+
		"\x2\x2\x12A\x128\x3\x2\x2\x2\x12B\x12D\a\x11\x2\x2\x12C\x12E\x5:\x1E\x2"+
		"\x12D\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F"+
		"\x131\a\x14\x2\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x132"+
		"\x3\x2\x2\x2\x132\x133\a\x12\x2\x2\x133\x39\x3\x2\x2\x2\x134\x139\x5<"+
		"\x1F\x2\x135\x136\a\x14\x2\x2\x136\x138\x5<\x1F\x2\x137\x135\x3\x2\x2"+
		"\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2"+
		"\x13A;\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13C\x13D\x5R*\x2\x13D\x13E\a"+
		"\x18\x2\x2\x13E\x13F\x5J&\x2\x13F=\x3\x2\x2\x2\x140\x142\a\xF\x2\x2\x141"+
		"\x143\x5\x46$\x2\x142\x141\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144"+
		"\x3\x2\x2\x2\x144\x145\a\x10\x2\x2\x145?\x3\x2\x2\x2\x146\x147\a&\x2\x2"+
		"\x147\x148\x5\x42\"\x2\x148\x149\a\'\x2\x2\x149\x151\x3\x2\x2\x2\x14A"+
		"\x14B\a\x3\x2\x2\x14B\x14D\a;\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x14E\x3"+
		"\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x151\x3\x2"+
		"\x2\x2\x150\x146\x3\x2\x2\x2\x150\x14C\x3\x2\x2\x2\x151\x41\x3\x2\x2\x2"+
		"\x152\x157\x5\x44#\x2\x153\x154\a\x14\x2\x2\x154\x156\x5\x44#\x2\x155"+
		"\x153\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158"+
		"\x3\x2\x2\x2\x158\x43\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15B\a\x4"+
		"\x2\x2\x15B\x15C\aQ\x2\x2\x15C\x45\x3\x2\x2\x2\x15D\x162\x5J&\x2\x15E"+
		"\x15F\a\x14\x2\x2\x15F\x161\x5J&\x2\x160\x15E\x3\x2\x2\x2\x161\x164\x3"+
		"\x2\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163G\x3\x2\x2\x2"+
		"\x164\x162\x3\x2\x2\x2\x165\x16A\x5J&\x2\x166\x167\a\x14\x2\x2\x167\x169"+
		"\x5J&\x2\x168\x166\x3\x2\x2\x2\x169\x16C\x3\x2\x2\x2\x16A\x168\x3\x2\x2"+
		"\x2\x16A\x16B\x3\x2\x2\x2\x16BI\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D"+
		"\x16E\b&\x1\x2\x16E\x16F\a\x1B\x2\x2\x16F\x197\x5J&\x1B\x170\x171\a\x1C"+
		"\x2\x2\x171\x197\x5J&\x1A\x172\x173\a\x1D\x2\x2\x173\x197\x5J&\x19\x174"+
		"\x175\a\x1E\x2\x2\x175\x197\x5J&\x18\x176\x177\a\x1F\x2\x2\x177\x197\x5"+
		"J&\x17\x178\x179\a \x2\x2\x179\x197\x5J&\x16\x17A\x17C\aK\x2\x2\x17B\x17D"+
		"\aQ\x2\x2\x17C\x17B\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17E\x3\x2"+
		"\x2\x2\x17E\x180\a\xF\x2\x2\x17F\x181\x5\x30\x19\x2\x180\x17F\x3\x2\x2"+
		"\x2\x180\x181\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\a\x10\x2\x2"+
		"\x183\x184\a\x11\x2\x2\x184\x185\x5\x32\x1A\x2\x185\x186\a\x12\x2\x2\x186"+
		"\x197\x3\x2\x2\x2\x187\x188\a\x42\x2\x2\x188\x18A\x5J&\x2\x189\x18B\x5"+
		"@!\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2"+
		"\x18C\x18D\x5> \x2\x18D\x197\x3\x2\x2\x2\x18E\x197\aQ\x2\x2\x18F\x197"+
		"\x5N(\x2\x190\x197\x5\x34\x1B\x2\x191\x197\x5\x38\x1D\x2\x192\x193\a\xF"+
		"\x2\x2\x193\x194\x5J&\x2\x194\x195\a\x10\x2\x2\x195\x197\x3\x2\x2\x2\x196"+
		"\x16D\x3\x2\x2\x2\x196\x170\x3\x2\x2\x2\x196\x172\x3\x2\x2\x2\x196\x174"+
		"\x3\x2\x2\x2\x196\x176\x3\x2\x2\x2\x196\x178\x3\x2\x2\x2\x196\x17A\x3"+
		"\x2\x2\x2\x196\x187\x3\x2\x2\x2\x196\x18E\x3\x2\x2\x2\x196\x18F\x3\x2"+
		"\x2\x2\x196\x190\x3\x2\x2\x2\x196\x191\x3\x2\x2\x2\x196\x192\x3\x2\x2"+
		"\x2\x197\x1DE\x3\x2\x2\x2\x198\x199\f\x15\x2\x2\x199\x19A\t\x2\x2\x2\x19A"+
		"\x1DD\x5J&\x16\x19B\x19C\f\x14\x2\x2\x19C\x19D\t\x3\x2\x2\x19D\x1DD\x5"+
		"J&\x15\x19E\x19F\f\x13\x2\x2\x19F\x1A0\t\x4\x2\x2\x1A0\x1DD\x5J&\x14\x1A1"+
		"\x1A2\f\x12\x2\x2\x1A2\x1A3\t\x5\x2\x2\x1A3\x1DD\x5J&\x13\x1A4\x1A5\f"+
		"\x11\x2\x2\x1A5\x1A6\t\x6\x2\x2\x1A6\x1DD\x5J&\x12\x1A7\x1A8\f\x10\x2"+
		"\x2\x1A8\x1A9\a,\x2\x2\x1A9\x1DD\x5J&\x11\x1AA\x1AB\f\xF\x2\x2\x1AB\x1AC"+
		"\a-\x2\x2\x1AC\x1DD\x5J&\x10\x1AD\x1AE\f\xE\x2\x2\x1AE\x1AF\a.\x2\x2\x1AF"+
		"\x1DD\x5J&\xF\x1B0\x1B1\f\r\x2\x2\x1B1\x1B2\a/\x2\x2\x1B2\x1DD\x5J&\xE"+
		"\x1B3\x1B4\f\f\x2\x2\x1B4\x1B5\a\x30\x2\x2\x1B5\x1DD\x5J&\r\x1B6\x1B7"+
		"\f\v\x2\x2\x1B7\x1B8\a\x16\x2\x2\x1B8\x1DD\x5J&\f\x1B9\x1BA\f\n\x2\x2"+
		"\x1BA\x1BB\a\x17\x2\x2\x1BB\x1BC\x5J&\x2\x1BC\x1BD\a\x18\x2\x2\x1BD\x1BE"+
		"\x5J&\v\x1BE\x1DD\x3\x2\x2\x2\x1BF\x1C0\f\t\x2\x2\x1C0\x1C1\a\x15\x2\x2"+
		"\x1C1\x1DD\x5J&\n\x1C2\x1C3\f\b\x2\x2\x1C3\x1C4\x5L\'\x2\x1C4\x1C5\x5"+
		"J&\t\x1C5\x1DD\x3\x2\x2\x2\x1C6\x1C7\f\"\x2\x2\x1C7\x1C8\a\r\x2\x2\x1C8"+
		"\x1C9\x5H%\x2\x1C9\x1CA\a\xE\x2\x2\x1CA\x1DD\x3\x2\x2\x2\x1CB\x1CC\f!"+
		"\x2\x2\x1CC\x1CD\a\x5\x2\x2\x1CD\x1DD\x5R*\x2\x1CE\x1CF\f \x2\x2\x1CF"+
		"\x1D0\a\x19\x2\x2\x1D0\x1DD\x5R*\x2\x1D1\x1D3\f\x1F\x2\x2\x1D2\x1D4\x5"+
		"@!\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2"+
		"\x1D5\x1DD\x5> \x2\x1D6\x1D7\f\x1D\x2\x2\x1D7\x1D8\x6&\x16\x2\x1D8\x1DD"+
		"\a\x1B\x2\x2\x1D9\x1DA\f\x1C\x2\x2\x1DA\x1DB\x6&\x18\x2\x1DB\x1DD\a\x1C"+
		"\x2\x2\x1DC\x198\x3\x2\x2\x2\x1DC\x19B\x3\x2\x2\x2\x1DC\x19E\x3\x2\x2"+
		"\x2\x1DC\x1A1\x3\x2\x2\x2\x1DC\x1A4\x3\x2\x2\x2\x1DC\x1A7\x3\x2\x2\x2"+
		"\x1DC\x1AA\x3\x2\x2\x2\x1DC\x1AD\x3\x2\x2\x2\x1DC\x1B0\x3\x2\x2\x2\x1DC"+
		"\x1B3\x3\x2\x2\x2\x1DC\x1B6\x3\x2\x2\x2\x1DC\x1B9\x3\x2\x2\x2\x1DC\x1BF"+
		"\x3\x2\x2\x2\x1DC\x1C2\x3\x2\x2\x2\x1DC\x1C6\x3\x2\x2\x2\x1DC\x1CB\x3"+
		"\x2\x2\x2\x1DC\x1CE\x3\x2\x2\x2\x1DC\x1D1\x3\x2\x2\x2\x1DC\x1D6\x3\x2"+
		"\x2\x2\x1DC\x1D9\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2"+
		"\x2\x1DE\x1DF\x3\x2\x2\x2\x1DFK\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2\x1E1"+
		"\x1E2\t\a\x2\x2\x1E2M\x3\x2\x2\x2\x1E3\x1EA\x5\\/\x2\x1E4\x1EA\x5`\x31"+
		"\x2\x1E5\x1EA\aR\x2\x2\x1E6\x1EA\x5\x62\x32\x2\x1E7\x1EA\x5P)\x2\x1E8"+
		"\x1EA\x5^\x30\x2\x1E9\x1E3\x3\x2\x2\x2\x1E9\x1E4\x3\x2\x2\x2\x1E9\x1E5"+
		"\x3\x2\x2\x2\x1E9\x1E6\x3\x2\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1E9\x1E8\x3"+
		"\x2\x2\x2\x1EAO\x3\x2\x2\x2\x1EB\x1EC\t\b\x2\x2\x1ECQ\x3\x2\x2\x2\x1ED"+
		"\x1F0\aQ\x2\x2\x1EE\x1F0\x5T+\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1EE\x3\x2"+
		"\x2\x2\x1F0S\x3\x2\x2\x2\x1F1\x1F7\x5V,\x2\x1F2\x1F5\x5\\/\x2\x1F3\x1F5"+
		"\x5`\x31\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5\x1F7\x3\x2"+
		"\x2\x2\x1F6\x1F1\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7U\x3\x2\x2\x2\x1F8"+
		"\x1F9\t\t\x2\x2\x1F9W\x3\x2\x2\x2\x1FA\x1FF\a\x13\x2\x2\x1FB\x1FF\a\x2"+
		"\x2\x3\x1FC\x1FF\x6-\x19\x2\x1FD\x1FF\x6-\x1A\x2\x1FE\x1FA\x3\x2\x2\x2"+
		"\x1FE\x1FB\x3\x2\x2\x2\x1FE\x1FC\x3\x2\x2\x2\x1FE\x1FD\x3\x2\x2\x2\x1FF"+
		"Y\x3\x2\x2\x2\x200\x201\a\x2\x2\x3\x201[\x3\x2\x2\x2\x202\x208\a\x6\x2"+
		"\x2\x203\x204\x5\x62\x32\x2\x204\x205\a\x19\x2\x2\x205\x206\a\x6\x2\x2"+
		"\x206\x208\x3\x2\x2\x2\x207\x202\x3\x2\x2\x2\x207\x203\x3\x2\x2\x2\x208"+
		"]\x3\x2\x2\x2\x209\x20A\x5\x62\x32\x2\x20A\x20B\a\x19\x2\x2\x20B\x20C"+
		"\a\a\x2\x2\x20C_\x3\x2\x2\x2\x20D\x20E\t\n\x2\x2\x20E\x61\x3\x2\x2\x2"+
		"\x20F\x210\a\n\x2\x2\x210\x215\aQ\x2\x2\x211\x212\a\x19\x2\x2\x212\x214"+
		"\aQ\x2\x2\x213\x211\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215\x213\x3\x2"+
		"\x2\x2\x215\x216\x3\x2\x2\x2\x216\x219\x3\x2\x2\x2\x217\x215\x3\x2\x2"+
		"\x2\x218\x21A\x5@!\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A"+
		"\x21D\x3\x2\x2\x2\x21B\x21C\a\v\x2\x2\x21C\x21E\aR\x2\x2\x21D\x21B\x3"+
		"\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\a\n\x2"+
		"\x2\x220\x63\x3\x2\x2\x2\x32\x65lp}\x81\x88\x97\xB2\xB6\xBA\xBE\xC8\xD5"+
		"\xDC\xE2\xE7\xEB\xFC\x10B\x117\x11B\x11F\x128\x12D\x130\x139\x142\x14E"+
		"\x150\x157\x162\x16A\x17C\x180\x18A\x196\x1D3\x1DC\x1DE\x1E9\x1EF\x1F4"+
		"\x1F6\x1FE\x207\x215\x219\x21D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ITVComponents.Scripting.CScript.Core
